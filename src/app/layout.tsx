"use client";

import "./globals.css";
import "@/styles/index.scss";
import "rc-slider/assets/index.css";
import LayoutClientChild from "../components/layout-client-child";
import "react-toastify/dist/ReactToastify.css";
import { ToastContainer } from "react-toastify";
import { QueryClient, QueryClientProvider } from "react-query";
import { Amplify } from "aws-amplify";
import config from "../amplifyconfiguration.json";
import Head from "next/head";
import ErrorBoundary from "@/components/ErrorBoundary";
import { AuthProvider } from "@/context/auth/AuthContext";
import {
  ProfilePictureProvider,
  useProfilePictureContext,
} from "@/context/profilePicture/ProfilePictureContext";
import { useEffect } from "react";
import Cookies from "js-cookie";
import fetchUserProfile from "@/utils/data/fetchUserProfile";
import { UserProfile } from "@/API";

const queryClient = new QueryClient();

Amplify.configure(config);

function App({ children }: { children: React.ReactNode }) {
  const { imageUrl, setImageUrl, setFirstNameContext, setLastNameContext } =
    useProfilePictureContext();

  useEffect(() => {
    async function fetchProfilePicture() {
      const userId = Cookies.get("userId");

      let userProfile: UserProfile | undefined;

      if (userId) {
        userProfile = await fetchUserProfile({ userId });
      }

      setFirstNameContext(userProfile?.firstName || "");
      setLastNameContext(userProfile?.lastName || "");

      const profilePicture = userProfile?.profilePicture?.imageUrl;

      if (profilePicture) {
        setImageUrl(profilePicture);
      }
    }

    if (!imageUrl) {
      fetchProfilePicture();
    }
  }, []);

  return (
    <LayoutClientChild>
      {children}

      <ToastContainer />
    </LayoutClientChild>
  );
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <Head>
        <title>Senior Project - Consumer</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <ErrorBoundary>
        <QueryClientProvider client={queryClient}>
          <AuthProvider>
            <ProfilePictureProvider>
              <App>{children}</App>
            </ProfilePictureProvider>
          </AuthProvider>
        </QueryClientProvider>
      </ErrorBoundary>
    </>
  );
}
